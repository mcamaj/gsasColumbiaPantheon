<?php

/**
 * @file
 * GSAS Field Formatters.
 */

use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function gsas_field_formatters_theme() {
  $module_path = drupal_get_path('module', 'gsas_field_formatters');

  return array(
    // From file.module.
    'gsas_file_video_player' => array(
      'variables' => array(
        'file' => NULL,
        'autoplay' => NULL,
        'attributes' => array(),
      ),
      'template' => 'gsas-file-video-player',
      'path' => $module_path . '/templates',
    ),
    'gsas_youtube_video_player' => array(
      'variables' => array(
        'embed_url' => NULL,
        'width' => NULL,
        'height' => NULL,
        'attributes' => array(),
      ),
      'template' => 'gsas-youtube-video-player',
      'path' => $module_path . '/templates',
    ),
  );
}

/**
 * Implements hook_preprocess_gsas_file_video_player().
 */
function gsas_field_formatters_preprocess_gsas_file_video_player(&$variables) {
  $file = $variables['file'];
  $options = array();

  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);
  // @todo Wrap in file_url_transform_relative(). This is currently
  // impossible. As a work-around, we currently add the 'url.site' cache context
  // to ensure different file URLs are generated for different sites in a
  // multisite setup, including HTTP and HTTPS versions of the same site.
  // Fix in https://www.drupal.org/node/2646744.
  $url = file_create_url($file_entity->getFileUri());
  $variables['#cache']['contexts'][] = 'url.site';

  $mime_type = $file->getMimeType();

  $variables['mime_type'] = $mime_type;

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

  // Classes to add to the file field for icons.
  $classes = array(
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, array('/' => '-', '.' => '-')),
    // Add a more general class for groups of well known MIME types.
    'file--' . file_icon_class($mime_type),
  );

  $attributes = new Attribute($variables['attributes']);
  $attributes->addClass($classes);

  // Set file classes to the options array.
  $variables['attributes'] = $attributes;

  $variables['video_url'] = Url::fromUri($url, $options);

  $video_attributes = array(
    'playsinline',
    'muted',
    'loop',
  );

  if ($variables['autoplay']) {
    $video_attributes[] = 'autoplay';
  }

  $variables['video_attributes'] = implode(' ', $video_attributes);
}
